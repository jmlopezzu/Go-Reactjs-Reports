Certainly! Let's start fresh with a simple web application using Go for the backend and React.js with Bootstrap for the frontend. I'll guide you through the process step by step.

### Backend (Go):

1. **Create a new Go project:**

   ```bash
   mkdir myapp
   cd myapp
   go mod init myapp
   ```

2. **Install necessary packages:**

   We'll use the `gorilla/mux` package for routing. Run:

   ```bash
   go get -u github.com/gorilla/mux
   ```

3. **Create the main Go file (`main.go`):**

   ```go
   package main

   import (
       "encoding/json"
       "net/http"

       "github.com/gorilla/mux"
   )

   type Report struct {
       ID      string `json:"id"`
       Content string `json:"content"`
   }

   var reports []Report

   func main() {
       r := mux.NewRouter()

       r.HandleFunc("/api/reports", getReports).Methods("GET")
       r.HandleFunc("/api/reports", createReport).Methods("POST")

       http.Handle("/", r)
       http.ListenAndServe(":8080", nil)
   }

   func getReports(w http.ResponseWriter, r *http.Request) {
       w.Header().Set("Content-Type", "application/json")
       json.NewEncoder(w).Encode(reports)
   }

   func createReport(w http.ResponseWriter, r *http.Request) {
       var report Report
       _ = json.NewDecoder(r.Body).Decode(&report)
       reports = append(reports, report)
       w.Header().Set("Content-Type", "application/json")
       json.NewEncoder(w).Encode(report)
   }
   ```

4. **Run the Go backend:**

   ```bash
   go run main.go
   ```

   This will start the Go server at `http://localhost:8080`.

### Frontend (React.js with Bootstrap):

1. **Create a new React app:**

   ```bash
   npx create-react-app myapp-frontend
   cd myapp-frontend
   ```

2. **Install Bootstrap:**

   ```bash
   npm install bootstrap
   ```

3. **Modify the `src/App.js` file:**

   Replace the content of `src/App.js` with the following:

   ```jsx
   import React, { useState, useEffect } from "react";
   import "bootstrap/dist/css/bootstrap.min.css";

   function App() {
     const [reports, setReports] = useState([]);
     const [modalShow, setModalShow] = useState(false);

     useEffect(() => {
       fetch("/api/reports")
         .then((res) => res.json())
         .then((data) => setReports(data));
     }, []);

     const handleShow = () => setModalShow(true);
     const handleClose = () => setModalShow(false);

     return (
       <div className="container mt-5">
         <h1>Report App</h1>
         <button className="btn btn-success" onClick={handleShow}>
           Show Reports
         </button>

         {/* Modal */}
         <div className="modal" tabIndex="-1" role="dialog" show={modalShow}>
           <div className="modal-dialog" role="document">
             <div className="modal-content">
               <div className="modal-header">
                 <h5 className="modal-title">Reports</h5>
                 <button
                   type="button"
                   className="close"
                   data-dismiss="modal"
                   aria-label="Close"
                   onClick={handleClose}
                 >
                   <span aria-hidden="true">&times;</span>
                 </button>
               </div>
               <div className="modal-body">
                 <ul>
                   {reports.map((report) => (
                     <li key={report.id}>{report.content}</li>
                   ))}
                 </ul>
               </div>
             </div>
           </div>
         </div>
       </div>
     );
   }

   export default App;
   ```

4. **Run the React app:**

   ```bash
   npm start
   ```

   This will start the React app at `http://localhost:3000`.

Now, you have a simple web application with a Go backend and a React.js frontend. The React frontend includes a button to display a modal with reports fetched from the Go backend. You can further enhance the design and functionality according to your needs.



curl -X POST http://localhost:8080/api/reports
